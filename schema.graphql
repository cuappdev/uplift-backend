schema {
  query: Query
  mutation: Mutation
}

enum AccessibilityType {
  WHEELCHAIR
}

type Activity {
  id: ID!
  facilityId: Int!
  gymId: Int!
  hasMembership: Boolean!
  name: String!
  needsReserve: Boolean!
  pricing: [Price]
}

type Amenity {
  id: ID!
  gymId: Int!
  type: AmenityType!
}

enum AmenityType {
  SHOWERS
  LOCKERS
  PARKING
  ELEVATORS
}

type Capacity {
  id: ID!
  count: Int!
  facilityId: Int!
  percent: Float!
  updated: Int!
}

type CapacityReminder {
  id: ID!
  fcmToken: String!
  gyms: [CapacityReminderGym]!
  capacityThreshold: Int!
  daysOfWeek: [DayOfWeekEnum]!
  isActive: Boolean
}

enum CapacityReminderGym {
  TEAGLEUP
  TEAGLEDOWN
  HELENNEWMAN
  TONIMORRISON
  NOYES
}

type Class {
  id: ID!
  name: String!
  description: String!
  classInstances: [ClassInstance]
}

type ClassInstance {
  id: ID!
  gymId: Int
  classId: Int!
  location: String!
  instructor: String!
  isCanceled: Boolean!
  isVirtual: Boolean!
  startTime: DateTime
  endTime: DateTime
  class_: Class
  gym: Gym
}

enum CourtType {
  BASKETBALL
  VOLLEYBALL
  BADMINTON
}

type CreateReport {
  report: Report
}

scalar DateTime

enum DayOfWeekEnum {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum DayOfWeekGraphQLEnum {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

type Equipment {
  id: ID!
  name: String!
  muscleGroups: [MuscleGroup]!
  cleanName: String!
  facilityId: Int!
  quantity: Int
  accessibility: AccessibilityType
}

type Facility {
  id: ID!
  facilityType: FacilityType!
  gymId: Int!
  name: String!
  activities: [Activity]
  capacity: Capacity
  equipment: [Equipment]
  hours: [OpenHours]
}

enum FacilityType {
  FITNESS
  POOL
  BOWLING
  COURT
}

type Giveaway {
  id: ID!
  name: String!
  users: [User]
}

type GiveawayInstance {
  id: ID!
  userId: Int!
  giveawayId: Int!
  numEntries: Int!
}

type Gym {
  id: ID!
  address: String!
  imageUrl: String
  latitude: Float!
  longitude: Float!
  name: String!
  activities: [Activity]
  amenities: [Amenity]
  facilities: [Facility]
  hours: [OpenHours]
  classes: [ClassInstance]
  reports: [Report]
}

type HourlyAverageCapacity {
  id: ID!
  facilityId: Int!
  averagePercent: Float!
  hourOfDay: Int!
  dayOfWeek: DayOfWeekGraphQLEnum
  history: [Float]!
}

scalar JSONString

type LoginUser {
  accessToken: String
  refreshToken: String
}

type LogoutUser {
  success: Boolean
}

enum MuscleGroup {
  ABDOMINALS
  CHEST
  BACK
  SHOULDERS
  BICEPS
  TRICEPS
  HAMSTRINGS
  QUADS
  GLUTES
  CALVES
  MISCELLANEOUS
  CARDIO
}

type Mutation {
  createGiveaway(name: String!): Giveaway
  createUser(email: String!, encodedImage: String, name: String!, netId: String!): User
  editUser(email: String, encodedImage: String, name: String, netId: String!): User
  enterGiveaway(giveawayId: Int!, userNetId: String!): GiveawayInstance
  setWorkoutGoals(userId: Int!, workoutGoal: [String]!): User
  logWorkout(facilityId: Int!, userId: Int!, workoutTime: DateTime!): Workout
  loginUser(netId: String!): LoginUser
  logoutUser: LogoutUser
  refreshAccessToken: RefreshAccessToken
  createReport(createdAt: DateTime!, description: String!, gymId: Int!, issue: String!): CreateReport
  deleteUser(userId: Int!): User
  createCapacityReminder(capacityPercent: Int!, daysOfWeek: [String]!, fcmToken: String!, gyms: [String]!): CapacityReminder
  toggleCapacityReminder(reminderId: Int!): CapacityReminder
  deleteCapacityReminder(reminderId: Int!): CapacityReminder
}

type OpenHours {
  id: ID!
  courtType: CourtType
  endTime: Int!
  facilityId: Int
  gymId: Int
  isShallow: Boolean
  isSpecial: Boolean!
  isWomen: Boolean
  startTime: Int!
}

type Price {
  id: ID!
  activityId: Int!
  cost: Float!
  name: String!
  rate: String
  type: PriceType!
}

enum PriceType {
  RATE
  GEAR
}

type Query {
  getAllGyms: [Gym]
  getUserByNetId(netId: String): [User]
  getUsersByGiveawayId(id: Int): [User]
  getWeeklyWorkoutDays(id: Int): [String]
  getWorkoutsById(id: Int): [Workout]
  activities: [Activity]
  getAllReports: [Report]
  getWorkoutGoals(id: Int!): [String]
  getUserStreak(id: Int!): JSONString
  getHourlyAverageCapacitiesByFacilityId(facilityId: Int): [HourlyAverageCapacity]
}

type RefreshAccessToken {
  newAccessToken: String
}

type Report {
  id: ID!
  createdAt: DateTime!
  description: String!
  gymId: Int!
  issue: ReportType!
  gym: Gym
}

enum ReportType {
  INACCURATE_EQUIPMENT
  INCORRECT_HOURS
  INACCURATE_DESCRIPTION
  WAIT_TIMES_NOT_UPDATED
  OTHER
}

type User {
  id: ID!
  email: String
  netId: String!
  name: String!
  activeStreak: Int
  maxStreak: Int
  workoutGoal: [DayOfWeekGraphQLEnum]
  encodedImage: String
  giveaways: [Giveaway]
}

type Workout {
  id: ID!
  workoutTime: DateTime!
  userId: Int!
  facilityId: Int!
}

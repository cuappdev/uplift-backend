schema {
  query: Query
}

type Capacity {
  id: ID!
  gymId: Int!
  count: Int!
  updated: DateTime!
}

scalar DateTime

type DayTime implements Node {
  id: ID!
  day: Int!
  startTime: DateTime!
  endTime: DateTime!
  restrictions: String
  specialHours: Boolean!
}

type Gym implements Node {
  id: ID!
  name: String!
  description: String!
  location: String!
  latitude: Int!
  longitude: Float!
  imageUrl: String
  times(day: Int, startTime: DateTime, endTime: DateTime, restrictions: String, specialHours: Boolean): [DayTime]
  capacity: [Capacity]
  capacities(gymId: Int): [Capacity]
}

interface Node {
  id: ID!
}

type Query {
  node(id: ID!): Node
  gyms(id: Int, name: String, location: String, latitude: Float, longitude: Float, imageUrl: String): [Gym]
}
